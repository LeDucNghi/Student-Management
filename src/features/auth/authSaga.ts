import { LoginPayload, authActions } from './authSlice';
import { call, delay, fork, put, take } from 'redux-saga/effects';

import { PayloadAction } from '@reduxjs/toolkit';

function* handleLogin(payload: LoginPayload) {
  try {
    yield delay(1000);
    console.log('handle login', payload);

    localStorage.setItem('access_token', 'fake_token');

    yield put(
      authActions.loginSuccess({
        id: 1,
        name: 'nghi',
      })
    );
  } catch (error) {
    console.log('üöÄ ~ file: authSaga.ts ~ line 20 ~ function*handleLogin ~ error', error);
    // yield put(authActions.loginFailed(error.message));
  }
}

function* handleLogout() {
  yield delay(1000);
  console.log('handle logout');
  localStorage.removeItem('access_token');
}

function* watchLoginFlow() {
  while (true) {
    // v√¨ l√∫c n√†y ch·ªâ cho h√†m handleLogin ch·∫°y ƒëc ƒë√∫ng 1 l·∫ßn ƒë·∫ßu th√¥i v√† n√≥ s·∫Ω ƒë·ª£i ( l·∫Øng nghe ) th·∫±ng logout
    // nh∆∞ng v√¨ logout xong ph·∫£i login l·∫°i ƒëc ( v√≤ng l·∫∑p v√¥ t·∫≠n ) n√™n ph·∫£i d√πng v√≤ng l·∫∑p while(true) ƒë·ªÉ c√≥ th·ªÉ login logout li√™n t·ª•c
    // khi th·∫±ng login ch∆∞a ƒëc l·∫Øng nghe ( th·ª±c hi·ªán ) th√¨ th·∫±ng logout c≈©ng k th·ªÉ th·ª±c hi·ªán ƒëc
    // nh∆∞ng khi ƒë√£ login r·ªìi th√¨ ph·∫£i logout ƒëc
    // n√™n ph·∫£i check coi trong local c√≥ access_token ch∆∞a, n·∫øu ch∆∞a th√¨ m·ªõi l·∫Øng nghe th·∫±ng login c√≤n ko th√¨ ng∆∞·ª£c l·∫°i
    // h√†m fork l√† h√†m non-blocking - l√† 1 h√†m khi ch∆∞a ch·∫°y xong nh∆∞ng v·∫´n ch·∫°y ti·∫øp h√†m kh√°c

    console.log('watch login');

    const isLoggedIn = Boolean(localStorage.getItem('access_token'));
    if (!isLoggedIn) {
      // n√≥ s·∫Ω l·∫Øng nghe th·∫±ng n√†y trc
      const action: PayloadAction<LoginPayload> = yield take(authActions.login.type);
      yield fork(handleLogin, action.payload);
    }

    // xong t·ªõi th·∫±ng n√†y

    // c√°i handleLogout n√†y c√≥ th·ªÉ x√†i h√†m fork ƒëc
    // nh∆∞ng khi gi·∫£ d·ª• m√¨nh c√≥ x·ª≠ l√≠ th√™m g√¨ ƒë√≥ ·ªü h√†m logout th√¨ trong khi n√≥ ƒëang x·ª≠ l√≠ th√¨ n√≥ l·∫°i b·∫Øt ƒë·∫ßu chu k·ª≥ m·ªõi
    // t·ª©c l√† nh·∫£y v√†o while n√†y ti·∫øp, khi ƒë√≥ h√†m logout ch∆∞a ch·∫°y xong ƒë·ªÉ x√≥a localStorage ƒë·ªÉ b·∫Øt ƒë·∫ßu login ti·∫øp
    // th√¨ l√∫c n√†y trong h√†m n√≥ v·∫´n s·∫Ω nh·∫≠n ra l√† c√≤n localStorage n√™n k th·ªÉ login ti·∫øp ƒëc
    // n√™n bh s·∫Ω s·ª≠ d·ª•ng h√†m call ƒë·ªÉ ƒë·ª£i h√†m logout ch·∫°y xong m·ªõi b·∫Øt ƒë·∫ßu v√≤ng while m·ªõi
    yield take(authActions.logout.type);
    yield call(handleLogout);
  }
}

export default function* authSaga() {
  yield fork(watchLoginFlow);
}
